package com.whty.platform.modules.hongcheng.utils;

import java.io.UnsupportedEncodingException;

import javax.crypto.Cipher;
import javax.crypto.SecretKey;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.DESKeySpec;

import org.apache.commons.codec.DecoderException;
import org.apache.commons.codec.binary.Hex;

public class MacUtil {
   
    public static String CaculateMac(byte[] mackey , byte[] b) throws DecoderException{
    	
    	DES des = new DES(mackey);
		int len1 = b.length;
		int len = (len1/8+1)*8;
		byte[] bIn = new byte[len];

		for(int i=0;i<len;i++){
			if(i<len1){
				bIn[i] = b[i];
			}
			else{
				bIn[i] = 0x00;
			}
		}
		int len8 = len/8;
		byte[] temp = new byte[8];
		
		for(int j=0;j<8;j++){
			temp[j] = bIn[j];
		}
		
		for(int k=1;k<len8;k++){
			for(int m=0;m<8;m++){				
				temp[m] = (byte)(temp[m] ^ bIn[k*8+m]);
			}

		}
		
		String tmp = Hex.encodeHexString(temp).toUpperCase();
		byte[] bTmp = tmp.getBytes();
		
		byte[] bTmp1 = new byte[8];
		byte[] bTmp2 = new byte[8];
		System.arraycopy(bTmp,0,bTmp1,0,8);
		System.arraycopy(bTmp,8,bTmp2,0,8);

	
		byte[] encode1 = des.encrypt(bTmp1);
		if(encode1 == null){
			return null;
		}
		
		byte[] result = new byte[8];
		for(int n=0;n<8;n++){
			result[n] = (byte)(encode1[n] ^ bTmp2[n]);
		}
		
		byte[] encode2 = des.encrypt(result);
		if(encode2 == null){
			return null;
		}
		String mac = new String(Hex.encodeHex(encode2)).toUpperCase().substring(0, 8);
		return mac;
	}
        
    public static void main(String[] args) throws DecoderException, UnsupportedEncodingException {
//    	//mac解密
//    			byte[] workkey  = Hex.decodeHex("1111111111111111".toCharArray());
//    			byte[] mackey_mi = Hex.decodeHex("6D7C63F4E9CB7BC4".trim().toCharArray());
//    			byte[] ming = new DES(workkey).decrypt(mackey_mi);
//    			System.out.print("mac key:");
//    			System.out.println(Hex.encodeHex(ming));
    	// 计算mac
		MacUtil util = new MacUtil();
		//007E60009900006030000000000200302004C030C0981100000000000000012300018002100006279999000000145838D151272511800026999999000000145838D58986663832373737373737303030313032303230303030303031313536DB07FD2EA1604F9620000000000000000013220000040005003230463732433145
//		String client_mac = new String(Hex.decodeHex("3230463732433145".toCharArray()));
//		byte[] msg = Hex.decodeHex("0200302004C030C0981100000000000000012300018002100006279999000000145838D151272511800026999999000000145838D58986663832373737373737303030313032303230303030303031313536DB07FD2EA1604F962000000000000000001322000004000500".toCharArray());
//		String mackey = "2f8607ef833d674a";
//		String mac = util.CaculateMac(Hex.decodeHex(mackey.toCharArray()),msg);
//		System.out.print("后台mac:");
//		System.out.println(mac);
//		System.out.print("终端mac:");
//		System.out.println(client_mac);
//		String data
//		String data ="25003020000000C002130000000000000000000000003831303035353535303030313031303130303030303034018230303131303130313139393530313031383933372020202020202020202020204443373734343230202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020200008010000000060202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020";
//		System.out.println(util.CaculateMac(Hex.decodeHex("3E7516FE43265A14".toCharArray()),Hex.decodeHex(data.toCharArray())));
//		System.out.print(StringUtil.hexToAscii("2020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020203032"));
//		System.out.print(new String(StringUtil.hexToBytes("CAB5C3FBD7A2B2E1B3C9B9A6202020202020202020202020202020202020"),"GBK"));
//		System.out.println(StringUtil.hexToAscii("3744324144384346"));
		String data
		String data
//					 //25002020000000C002132000000035963831303035353535303030313031303130303030303034023230303132303130353139383430353230303031302020202020202020202020203833463438333530202020202020202020202020CEBAC5F420202020202020202020202020202020312020202020202020BAD3B1B1CAA1CAAFBCD2D7AFCAD0C7C5B6ABC7F8D3D1D2EAC2B720202020202020202020202020202020202020202020202020202020202020202020313836303232353732353361726365724065796F752E636F6D20202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202000080100000001122020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020203032CAB5C3FBD7A2B2E1B3C9B9A62020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020
		MacUtil m = new MacUtil();
		System.out.println(m.CaculateMac(Hex.decodeHex("3E7516FE43265A14".toCharArray()), Hex.decodeHex(data1.toCharArray())));
    }    
}

class DES {
	
	private static final String DES_STR = "DES/ECB/NoPadding";//"DES/ECB/NoPadding";
	protected SecretKey key;
	
	public DES(byte[] key) {
		setKey(key);
	}
	
	public void setKey(byte[] rawKeyData) {
		try {
			DESKeySpec dks = new DESKeySpec(rawKeyData);		
			SecretKeyFactory keyFactory = SecretKeyFactory.getInstance("DES");
			key = keyFactory.generateSecret(dks);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	public byte[] encrypt(byte[] data) {
		byte[] encryptedData = null;

		try {			
			Cipher cipher = Cipher.getInstance(DES_STR);
			cipher.init(Cipher.ENCRYPT_MODE, key);
			encryptedData = cipher.doFinal(data);
		} catch (Exception e) {
			e.printStackTrace();
		} 
		return encryptedData;

	}
	
	public byte[] decrypt(byte[] data) {
		byte[] decryptedData = null;
		try {
			Cipher cipher = Cipher.getInstance(DES_STR);
			cipher.init(Cipher.DECRYPT_MODE, key);
			decryptedData = cipher.doFinal(data);
		} catch (Exception e) {
			e.printStackTrace();
		} 
		return decryptedData;
	}
}
